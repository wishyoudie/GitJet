package gitjet.model;

import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;
import java.io.Writer;
import java.util.*;

/**
 * A class that represents a Maven repository on GitHub. Contains some of its properties.
 */
public class Repo {

    private String name;
    private String author;
    private int numberOfContributors;
    private int numberOfCommits;
    private int numberOfLinesInProject;
    private int numberOfLinesInTests;
    private String hasTests;
    private String hasReadMe;
    private final Set<String> mavenDependencies = new HashSet<>();

    /**
     * Default constructor.
     */
    public Repo() {
    }

    /**
     * Constructor from all the parameters (flags as booleans)
     * @param name Repository name.
     * @param author Repository authors username.
     * @param numberOfContributors Number of contributors to repository.
     * @param numberOfCommits Number of commits to repository.
     * @param numberOfLinesInProject Number of lines in all project source code files.
     * @param testInProject True if repository has test files, false otherwise.
     * @param numberOfLinesInTests Number of lines in test files.
     * @param readmeInProject True if repository has a ReadMe file, false otherwise.
     * @param mavenDependencies Set of repository dependencies.
     */
    public Repo(String name, String author,
                int numberOfContributors, int numberOfCommits, int numberOfLinesInProject, boolean testInProject, int numberOfLinesInTests,
                boolean readmeInProject, Set<String> mavenDependencies) {
        this.name = name;
        this.author = author;
        this.numberOfContributors = numberOfContributors;
        this.numberOfCommits = numberOfCommits;
        this.numberOfLinesInProject = numberOfLinesInProject;
        this.numberOfLinesInTests = numberOfLinesInTests;
        this.hasTests = refactorBoolean(testInProject);
        this.hasReadMe = refactorBoolean(readmeInProject);
        this.mavenDependencies.addAll(mavenDependencies);
    }

    /**
     * Constructor from all the parameters (flags as strings)
     * @param name Repository name.
     * @param author Repository authors username.
     * @param numberOfContributors Number of contributors to repository.
     * @param numberOfCommits Number of commits to repository.
     * @param numberOfLinesInProject Number of lines in all project source code files.
     * @param testInProject '+' if repository has test files, '-' otherwise.
     * @param numberOfLinesInTests Number of lines in test files.
     * @param readmeInProject '+' if repository has a ReadMe file, '-' otherwise.
     * @param mavenDependencies Set of repository dependencies.
     */
    public Repo(String name, String author,
                int numberOfContributors, int numberOfCommits, int numberOfLinesInProject, String testInProject, int numberOfLinesInTests,
                String readmeInProject, Set<String> mavenDependencies) {
        this.name = name;
        this.author = author;
        this.numberOfContributors = numberOfContributors;
        this.numberOfCommits = numberOfCommits;
        this.numberOfLinesInProject = numberOfLinesInProject;
        this.numberOfLinesInTests = numberOfLinesInTests;
        this.hasTests = testInProject;
        this.hasReadMe = readmeInProject;
        this.mavenDependencies.addAll(mavenDependencies);
    }

    /**
     * Constructor from string generated by toString method of this class.
     * @param rawRepo A string containing information.
     */
    public Repo(String rawRepo) {
        String[] rawParts = rawRepo.split(" ");
        List<String> parts = new ArrayList<>(Arrays.asList(rawParts));
        this.name = parts.get(0);
        this.author = parts.get(1);
        this.numberOfContributors = Integer.parseInt(parts.get(2));
        this.numberOfCommits = Integer.parseInt(parts.get(3));
        this.numberOfLinesInProject = Integer.parseInt(parts.get(4));
        this.hasTests = parts.get(5);
        this.numberOfLinesInTests = Integer.parseInt(parts.get(6));
        this.hasReadMe = parts.get(7);
        for (int i = 8; i < parts.size(); i++) {
            this.mavenDependencies.add(parts.get(i));
        }
    }

    /**
     * Name getter.
     * @return Repository name.
     */
    public String getName() {
        return this.name;
    }

    /**
     * Author getter.
     * @return Repository authors username.
     */
    public String getAuthor() {
        return this.author;
    }

    /**
     * Number of contributors getter.
     * @return Number of contributors to repository.
     */
    public int getNumberOfContributors() {
        return this.numberOfContributors;
    }

    /**
     * Number of commits getter.
     * @return Number of commits to repository.
     */
    public int getNumberOfCommits() {
        return this.numberOfCommits;
    }

    /**
     * Total number of lines in project getter.
     * @return Number of lines in all project source code files.
     */
    public int getNumberOfLinesInProject() {
        return this.numberOfLinesInProject;
    }

    /**
     * Flag if a repository has tests getter.
     * @return '+' if repository has test files, '-' otherwise.
     */
    public String getHasTests() {
        return this.hasTests;
    }

    /**
     * Number of lines in tests getter.
     * @return Number of lines in test files.
     */
    public int getNumberOfLinesInTests() {
        return this.numberOfLinesInTests;
    }

    /**
     * ReadMe getter (String).
     * @return '+' if repository has a ReadMe file, '-' otherwise.
     */
    public String getHasReadMe() {
        return this.hasReadMe;
    }

    /**
     * ReadMe getter (boolean).
     * @return True if repository has a ReadMe file, false otherwise.
     */
    public boolean hasReadMe() {
        return Objects.equals(this.hasReadMe, "+");
    }

    /**
     * Dependencies getter.
     * @return Set of repository dependencies.
     */
    public Set<String> getMavenDependencies() {
        return this.mavenDependencies;
    }

    /**
     * Change condition to '+'/'-' char helper method.
     * @param condition True/false statement
     * @return '+'/'-' respectively.
     */
    private String refactorBoolean(boolean condition) {
        if (condition)
            return "+";
        return "-";
    }

    /**
     * Extract repository name from URL to repository on GitHub.
     * @param link Link to repository on GitHub.
     * @return Repository name.
     */
    public static String getNameFromLink(String link) {
        List<String> linkSplit = Arrays.asList(link.split("/"));
        return linkSplit.get(linkSplit.size() - 1);
    }

    /**
     * Extract repository author from URL to repository on GitHub.
     * @param link Link to repository on GitHub.
     * @return Repository author username.
     */
    public static String getAuthorFromLink(String link) {
        List<String> linkSplit = Arrays.asList(link.split("/"));
        return linkSplit.get(linkSplit.size() - 2);
    }

    /**
     * Add repository to storage.
     */
    public void addToStorage() {
        try (Writer writer = new BufferedWriter(new FileWriter("data.dat", true))) {
            writer.append(this.toString()).append(System.lineSeparator());
        } catch (IOException e) {
            throw new IllegalArgumentException(Errors.DATA_ERROR.getMessage());
        }
    }

    /**
     * Turn repository instance to string with information for storage.
     * @return Information string.
     */
    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append(String.format("%s %s %d %d %d %s %d %s", this.name, this.author, this.numberOfContributors, this.numberOfCommits, this.numberOfLinesInProject,
                this.hasTests, this.numberOfLinesInTests, this.hasReadMe));
        for (String dep : mavenDependencies) {
            sb.append(" ");
            sb.append(dep);
        }
        return sb.toString();
    }
}